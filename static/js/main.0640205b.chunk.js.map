{"version":3,"sources":["icon/stackline_logo.svg","components/Bio.tsx","components/Graph.tsx","components/Table.tsx","actions/types.js","App.tsx","actions/postActions.ts","reducers/reducer.ts","store.ts","index.tsx"],"names":["Bio","title","subtitle","image","tags","className","src","alt","map","tag","Graph","sales","ResponsiveContainer","width","height","LineChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","Table","style","column","Object","keys","entry","border","FETCH_DATA","connect","state","items","fetchData","dispatch","console","log","fetch","then","res","json","payload","props","useDispatch","useEffect","headers","stackline_logo","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0640205b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/stackline_logo.5935081b.svg\";","//Import React (No Hooks Needed)\r\nimport React from 'react'\r\n\r\n//Define Interface For Bio Props\r\ninterface IBio {\r\n    title: string;\r\n    subtitle: string;\r\n    image: string;\r\n    tags: string[];\r\n}\r\n\r\n//Destructure Title, Subtitle, Image, Tags To Be Displayed in Bio Component\r\nconst Bio: React.FC<IBio> = ({ title, subtitle, image, tags }) => {\r\n    return (\r\n        <div className='bio-card'>\r\n            <br></br>\r\n            <img src={image} alt='blender' />\r\n            <h1>{title}</h1>\r\n            <h4>{subtitle}</h4>\r\n            <hr></hr>\r\n            <div className='bio-div'>\r\n                {tags.map(tag => (\r\n                <div className='bio-tags'>{tag}</div>\r\n                ))}\r\n            </div>\r\n            <hr></hr>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Bio;\r\n","//Import React and ReCharts\r\nimport React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n//Define Interface For Graph\r\ninterface IGraph {\r\n  sales: any[]\r\n};\r\n\r\nconst Graph: React.FC<IGraph> = ({ sales }) => {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <LineChart\r\n          width={200}\r\n          height={300}\r\n          data={sales}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"weekEnding\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"retailSales\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n        <Line type=\"monotone\" dataKey=\"wholesaleSales\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n};\r\n\r\nexport default Graph;\r\n","//Import React\r\nimport React from 'react'\r\n\r\n//Define Interface With Sales Set To An 'Any' Array\r\ninterface ITable {\r\n    sales: any[]\r\n}\r\n\r\n//Destructure Sales To Display Information On Table\r\nconst Table: React.FC<ITable> = ({ sales }) => {\r\n\r\n    //Create Array With Column Names To Display On Top Of Table\r\n    const columns = ['WEEK ENDING', 'RETAIL SALES', 'WHOLESALE SALES', 'UNITS SOLD', 'RETAILER MARGIN']\r\n    \r\n    return (\r\n      <div>\r\n        <table style={{width: '100%'}}>\r\n          <thead>\r\n            <tr>\r\n              {columns.map(column => (\r\n                  <th>{column}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sales.map(data => (\r\n                <tr>\r\n                {Object.keys(data).map(entry => (\r\n                    <th style={{border: 'thin solid'}}>{data[entry]}</th> \r\n                ))}\r\n                </tr>\r\n            ))};\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default Table;\r\n","//Define Action Type To Fetch Data From Json File\r\nexport const FETCH_DATA = 'FETCH_DATA';","//Import React, Redux Hooks, CSS File\nimport React, { useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport stackline_logo from './icon/stackline_logo.svg';\nimport './App.css';\n\n//Import Components\nimport Bio from './components/Bio';\nimport Graph from './components/Graph';\nimport Table from './components/Table';\n\n//Import FetchData Action & Function\nimport { fetchData } from './actions/postActions';\nimport { FETCH_DATA } from \"./actions/types\";\n\n//Define Interface For Props\ninterface IProps {\n  items: {\n    id: string;\n    title: string;\n    subtitle: string;\n    image: string;\n    tags: string[];\n    sales: any[];\n  }\n};\n\nconst App: React.FC<IProps> = (props: { items }) => {\n\n  //Initialize Dispatch\n  const dispatch = useDispatch();\n\n  //Define FetchData Function\n  const fetchData = () => {\n    fetch('./stackline_frontend_assessment_data_2021.json', {\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    })\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FETCH_DATA,\n        payload: data\n    }))\n  };\n\n  //Call FetchData Within UseEffect()\n  useEffect(() => {\n    fetchData()\n  }, []);  \n  \n  return (\n    <div className='App'>\n      {props.items && (\n        <div>\n          <div className=\"outer\">\n            <img src={stackline_logo} alt='logo' className='logo' />\n          </div>\n          <div className='grid-container'>\n            <div className='bio'>\n              <Bio title={props.items.title} subtitle={props.items.subtitle} image={props.items.image} tags={props.items.tags} />\n            </div>\n            <div className='graph'>\n              <Graph sales={props.items.sales} />\n            </div>\n            <div className='table'>\n              <Table sales={props.items.sales}/>\n            </div>    \n          </div>\n        </div>       \n      )}     \n    </div>\n  );\n};\n\n//Define MapStateToProps\nconst mapStateToProps = state => ({\n  items: state.items[0]\n})\n\n//Connect MapStateToProps To App Component (Redux)\nexport default connect(mapStateToProps, { fetchData })(App);\n","//Import FetchData Action Type and Dispatch From Redux\r\nimport { FETCH_DATA } from \"./types\";\r\nimport { Dispatch } from 'redux';\r\n\r\n//Define & Export FetchData Function (Fetches JSON Data)\r\nexport const fetchData = (dispatch) => (dispatch: Dispatch) => {\r\n    console.log('fetching...')\r\n    fetch('../stackline_frontend_assessment_data_2021.json')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({\r\n        type: FETCH_DATA,\r\n        payload: data\r\n    }));\r\n};\r\n","//Import FETCH_DATA Action Type\r\nimport { FETCH_DATA } from \"../actions/types\";\r\n\r\n//Define InitialState (Items Property Set To Array)\r\nconst initialState = {\r\n    items: []\r\n};\r\n\r\n//Define Interface For Action (Includes Type and Payload)\r\ninterface IAction {\r\n    type: string\r\n    payload: []\r\n};\r\n\r\n//Define & Export Reducer Function (Will Popular Items From JSON File)\r\nexport default function reducer(state = initialState, action: IAction) {\r\n    switch (action.type) {\r\n        case FETCH_DATA:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","//Import CreateStore & Reducer --> (to pass state and reducer as arguments into createStore)\r\nimport { createStore } from \"redux\";\r\nimport reducer from './reducers/reducer';\r\n\r\n//Define InitialState With Items Property\r\nconst initialState = {\r\n    items: []\r\n};\r\n\r\n//Initialize & Export Store\r\nconst store = createStore(reducer, initialState);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//Import Provider & Store From Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n//Wrap Provider with Store Around App Component\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}